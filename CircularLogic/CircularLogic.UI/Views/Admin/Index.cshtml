@using CircularLogic.Models
@model CircularLogic.UI.Models.AdminIndexVM
@{
    ViewBag.Title = "Index";
}

<h2>Administrator Dashboard</h2>


<div id="exTab3" class="container">
    <ul class="nav nav-pills">
        <li class="active">
            <a href="#1" data-toggle="tab">Post Queue</a>
        </li>
        <li>
            <a href="#2" data-toggle="tab">Category Management</a>
        </li>
        <li class="disabled">
            <a href="#3" data-toggle="tab">User Management</a>
        </li>
    </ul>

    <div class="tab-content clearfix">
        <div class="tab-pane active" id="1">
            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapse1">
                                New Blog Posts
                            </a>
                        </h4>
                    </div>
                    <div id="collapse1" class="panel-collapse collapse in">
                        <div class="panel-body">
                            <table class="table">
                                <thead>
                                <tr>
                                    <td>Title</td>
                                    <td>Author</td>
                                    <td>Date Submitted</td>
                                    <td>Approve</td>
                                    <td>Deny</td>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (QueuedBP bp in Model.BlogPosts.Where(b => b.QueueAction == QueueAction.New))
                                {
                                    <tr>
                                        <td>
                                            @bp.Title
                                            <input type="hidden" value="@bp.ContentQueueID" class="hidden new"/>
                                        </td>
                                        <td>@bp.UserID</td>
                                        <td>@bp.CreationTime.Value.ToShortDateString()</td>
                                        <td>
                                            <input type="checkbox" class="newCB allow"/>
                                        </td>
                                        <td>
                                            <input type="checkbox" class="newCB deny"/>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                            <button type="submit" id="newQueue">Submit</button>

                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapse2">
                                Edit Requests
                            </a>
                        </h4>
                    </div>
                    <div id="collapse2" class="panel-collapse collapse">
                        <div class="panel-body">
                            <table class="table">
                                <thead>
                                <tr>
                                    <td>Title</td>
                                    <td>Author</td>
                                    <td>Date Submitted</td>
                                    <td>Approve</td>
                                    <td>Deny</td>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                @foreach (QueuedBP bp in Model.BlogPosts.Where(b => b.QueueAction == QueueAction.Edit))
                                {
                                    <tr>
                                        <td>
                                            @bp.Title
                                            <input type="hidden" value="@bp.ContentQueueID" class="hidden edit"/>
                                        </td>
                                        <td>@bp.UserID</td>
                                        <td>@bp.CreationTime.Value.ToShortDateString()</td>
                                        <td>
                                            <input type="checkbox" class="editCB allow"/>
                                        </td>
                                        <td>
                                            <input type="checkbox" class="editCB deny"/>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                            <button type="submit" id="editQueue">Submit</button>

                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapse3">
                                Delete Requests
                            </a>
                        </h4>
                    </div>
                    <div id="collapse3" class="panel-collapse collapse">
                        <div class="panel-body">
                            <table class="table">
                                <thead>
                                <tr>
                                    <td>Title</td>
                                    <td>Author</td>
                                    <td>Date Submitted</td>
                                    <td>Approve</td>
                                    <td>Deny</td>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (QueuedBP bp in Model.BlogPosts.Where(b => b.QueueAction == QueueAction.Delete))
                                {
                                    <tr>
                                        <td>
                                            @bp.Title
                                            <input type="hidden" value="@bp.ContentQueueID" class="hidden delete"/>
                                        </td>
                                        <td>@bp.UserID</td>
                                        <td>@bp.CreationTime.Value.ToShortDateString()</td>
                                        <td>
                                            <input type="checkbox" class="deleteCB allow"/>
                                        </td>
                                        <td>
                                            <input type="checkbox" class="deleteCB deny"/>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                            <button type="submit" id="deleteQueue">Submit</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane" id="2">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">Categories</h4>
                </div>
                <div class="panel-body">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <td>Category Name</td>
                            <td>Blogs in Category</td>
                            <td>Action</td>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (KeyValuePair<Category, int> c in Model.CategoryCountDictionary)
                        {
                            <tr>
                                <td>@c.Key.Name</td>
                                <td>@c.Value</td>
                                <td>
                                    @if (c.Value > 0)
                                    {
                                        <button class="btn btn-danger btn-sm catDelete disabled" type="submit" id=@Html.Raw(c.Key.CategoryID)>
                                            <span class="glyphicon glyphicon-trash "></span>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-danger btn-sm catDelete" type="submit" id=@Html.Raw(c.Key.CategoryID)>
                                            <span class="glyphicon glyphicon-trash"></span>
                                        </button>
                                    }

                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                @*<div class="panel-footer">Panel Footer</div>*@
            </div>
        </div>
        <div class="tab-pane" id="3">
            <h3>Coming Soon</h3>
        </div>
    </div>
</div>

@section scripts{
<script src="~/Scripts/app/snarl.min.js"></script>
    <script type="text/javascript">
        var uri = "/api/categoryAPI";
        $(document).ready(function () {
            $('.catDelete').click(function() {
                var closestTR = $(this).closest('tr');
                var t = this.id;
                var OtherPost = {
                    id: t,
                    type: 'DELETE'
                };
                $.post(uri, OtherPost)
                    .done(function() {
                        
                    })
                    .success(function() {
                        Snarl.addNotification({
                            title: 'Category Removed',
                            text: 'The category has been successfully removed'
                        });
                        closestTR.remove();
                    })
                    .fail(function(jqXhr, status, err) {
                        alert((status + ' - ' + err));
                    });
            });
        });

    </script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('input.newCB').on('change', function() {
                $(this).closest('tr').find('input.newCB').not(this).prop('checked', false);
            });

            $('input.editCB').on('change', function() {
                $(this).closest('tr').find('input.editCB').not(this).prop('checked', false);
            });

            $('input.deleteCB').on('change', function() {
                $(this).closest('tr').find('input.deleteCB').not(this).prop('checked', false);
            });

            $('#newQueue').on('click', function() {

            });
        });
    </script>

    <script type="text/javascript">
        var uriAdmin = "../api/adminAPI";

        function setCheckBoxes(buttonID, checkBoxClass) {
            $(buttonID).on('click', function() {
                var allowedBlogPosts = [];
                var deniedBlogPosts = [];
                var rowsChanged = [];
                $('input.' + checkBoxClass + '.allow').each(function() {
                    if (this.checked) {
                        allowedBlogPosts.push($(this).closest('tr').find('input.hidden').val());
                        rowsChanged.push($(this).closest('tr'));
                    };
                });
                $('input.' + checkBoxClass + '.deny').each(function() {
                    if (this.checked) {
                        deniedBlogPosts.push($(this).closest('tr').find('input.hidden').val());
                        rowsChanged.push($(this).closest('tr'));
                    };
                });
                var AllowDeny = {
                    allowedBP: allowedBlogPosts,
                    deniedBP: deniedBlogPosts
                };
                $.post(uriAdmin, AllowDeny)
                    .done(function() {
                        alert("Success");
                        rowsChanged.forEach(function(item) {
                            item.remove();
                        });
                    })
                    .fail(function(jqXhr, status, err) {
                        alert((status + ' - ' + err));
                    });
            });
        };

        $(document).ready(function() {
            setCheckBoxes('#newQueue', 'newCB');
            setCheckBoxes('#editQueue', 'editCB');
            setCheckBoxes('#deleteQueue', 'deleteCB');

        });
    </script>


}

@*    -add link to view a blog post    *@
@*
    The page will have 3 tabs inside the body

    Post Queue  |  Category Management  |  User Management

    The 1st will

        Display a table of Admin Queue Posts
            Pannel with tables in body for the grouping
            get them as sorted by Add / Edit / Delete
                and then ordered by most recent
                    if time allows dynamic angular sorting?

        Title  |  Author  |  Date Submitted  |  Approve  |  Deny  |
        Link      string       date string     checkbox   checkbox


            Title will be a link to view the post in question most likely a modal,
        allowing editing on page with a Delete button and an Approve button.
        These buttons will preform their individual actions immediately and update
        this pages table.

        Checkboxes only one can be selected at a time but they can also select neither
        this will all be in a form and at the bottom the admin can hit submit to process
        multiple check boxes.


    The Second will

        Category Name  |  Count  |  Delete

        Display a table of all categories with their mention count and a button to delete them
            if mention count > 0 throw error requiring the user to re-categorize before deleting
            else Delete it and update table on page

    The Third will allow the Admin to set user roles
*@